// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: linkage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Linkage_LinkageGet_FullMethodName  = "/proto.Linkage/linkageGet"
	Linkage_LinkagePost_FullMethodName = "/proto.Linkage/linkagePost"
	Linkage_LinkageDel_FullMethodName  = "/proto.Linkage/linkageDel"
	Linkage_LinkagePut_FullMethodName  = "/proto.Linkage/linkagePut"
)

// LinkageClient is the client API for Linkage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkageClient interface {
	// 联动组列表
	LinkageGet(ctx context.Context, in *LinkageGetReq, opts ...grpc.CallOption) (*LinkageGetResp, error)
	// 增加联动组
	LinkagePost(ctx context.Context, in *LinkagePostReq, opts ...grpc.CallOption) (*LinkagePostResp, error)
	// 删除联动组
	LinkageDel(ctx context.Context, in *LinkageDelReq, opts ...grpc.CallOption) (*LinkageDelResp, error)
	// 修改联动组
	LinkagePut(ctx context.Context, in *LinkagePutReq, opts ...grpc.CallOption) (*LinkagePutResp, error)
}

type linkageClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkageClient(cc grpc.ClientConnInterface) LinkageClient {
	return &linkageClient{cc}
}

func (c *linkageClient) LinkageGet(ctx context.Context, in *LinkageGetReq, opts ...grpc.CallOption) (*LinkageGetResp, error) {
	out := new(LinkageGetResp)
	err := c.cc.Invoke(ctx, Linkage_LinkageGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkageClient) LinkagePost(ctx context.Context, in *LinkagePostReq, opts ...grpc.CallOption) (*LinkagePostResp, error) {
	out := new(LinkagePostResp)
	err := c.cc.Invoke(ctx, Linkage_LinkagePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkageClient) LinkageDel(ctx context.Context, in *LinkageDelReq, opts ...grpc.CallOption) (*LinkageDelResp, error) {
	out := new(LinkageDelResp)
	err := c.cc.Invoke(ctx, Linkage_LinkageDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkageClient) LinkagePut(ctx context.Context, in *LinkagePutReq, opts ...grpc.CallOption) (*LinkagePutResp, error) {
	out := new(LinkagePutResp)
	err := c.cc.Invoke(ctx, Linkage_LinkagePut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkageServer is the server API for Linkage service.
// All implementations must embed UnimplementedLinkageServer
// for forward compatibility
type LinkageServer interface {
	// 联动组列表
	LinkageGet(context.Context, *LinkageGetReq) (*LinkageGetResp, error)
	// 增加联动组
	LinkagePost(context.Context, *LinkagePostReq) (*LinkagePostResp, error)
	// 删除联动组
	LinkageDel(context.Context, *LinkageDelReq) (*LinkageDelResp, error)
	// 修改联动组
	LinkagePut(context.Context, *LinkagePutReq) (*LinkagePutResp, error)
	mustEmbedUnimplementedLinkageServer()
}

// UnimplementedLinkageServer must be embedded to have forward compatible implementations.
type UnimplementedLinkageServer struct {
}

func (UnimplementedLinkageServer) LinkageGet(context.Context, *LinkageGetReq) (*LinkageGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkageGet not implemented")
}
func (UnimplementedLinkageServer) LinkagePost(context.Context, *LinkagePostReq) (*LinkagePostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkagePost not implemented")
}
func (UnimplementedLinkageServer) LinkageDel(context.Context, *LinkageDelReq) (*LinkageDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkageDel not implemented")
}
func (UnimplementedLinkageServer) LinkagePut(context.Context, *LinkagePutReq) (*LinkagePutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkagePut not implemented")
}
func (UnimplementedLinkageServer) mustEmbedUnimplementedLinkageServer() {}

// UnsafeLinkageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkageServer will
// result in compilation errors.
type UnsafeLinkageServer interface {
	mustEmbedUnimplementedLinkageServer()
}

func RegisterLinkageServer(s grpc.ServiceRegistrar, srv LinkageServer) {
	s.RegisterService(&Linkage_ServiceDesc, srv)
}

func _Linkage_LinkageGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkageGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkageServer).LinkageGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Linkage_LinkageGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkageServer).LinkageGet(ctx, req.(*LinkageGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linkage_LinkagePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkagePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkageServer).LinkagePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Linkage_LinkagePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkageServer).LinkagePost(ctx, req.(*LinkagePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linkage_LinkageDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkageDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkageServer).LinkageDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Linkage_LinkageDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkageServer).LinkageDel(ctx, req.(*LinkageDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linkage_LinkagePut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkagePutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkageServer).LinkagePut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Linkage_LinkagePut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkageServer).LinkagePut(ctx, req.(*LinkagePutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Linkage_ServiceDesc is the grpc.ServiceDesc for Linkage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Linkage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Linkage",
	HandlerType: (*LinkageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "linkageGet",
			Handler:    _Linkage_LinkageGet_Handler,
		},
		{
			MethodName: "linkagePost",
			Handler:    _Linkage_LinkagePost_Handler,
		},
		{
			MethodName: "linkageDel",
			Handler:    _Linkage_LinkageDel_Handler,
		},
		{
			MethodName: "linkagePut",
			Handler:    _Linkage_LinkagePut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "linkage.proto",
}
