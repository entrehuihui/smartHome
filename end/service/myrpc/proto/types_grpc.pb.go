// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: types.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Types_TypesGet_FullMethodName  = "/proto.Types/typesGet"
	Types_TypesPost_FullMethodName = "/proto.Types/typesPost"
	Types_TypesDel_FullMethodName  = "/proto.Types/typesDel"
	Types_TypesPut_FullMethodName  = "/proto.Types/typesPut"
)

// TypesClient is the client API for Types service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypesClient interface {
	// 设备类型列表
	TypesGet(ctx context.Context, in *TypesGetReq, opts ...grpc.CallOption) (*TypesGetResp, error)
	// 增加设备类型
	TypesPost(ctx context.Context, in *TypesPostReq, opts ...grpc.CallOption) (*TypesPostResp, error)
	// 删除设备类型
	TypesDel(ctx context.Context, in *TypesDelReq, opts ...grpc.CallOption) (*TypesDelResp, error)
	// 修改设备类型
	TypesPut(ctx context.Context, in *TypesPutReq, opts ...grpc.CallOption) (*TypesPutResp, error)
}

type typesClient struct {
	cc grpc.ClientConnInterface
}

func NewTypesClient(cc grpc.ClientConnInterface) TypesClient {
	return &typesClient{cc}
}

func (c *typesClient) TypesGet(ctx context.Context, in *TypesGetReq, opts ...grpc.CallOption) (*TypesGetResp, error) {
	out := new(TypesGetResp)
	err := c.cc.Invoke(ctx, Types_TypesGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesClient) TypesPost(ctx context.Context, in *TypesPostReq, opts ...grpc.CallOption) (*TypesPostResp, error) {
	out := new(TypesPostResp)
	err := c.cc.Invoke(ctx, Types_TypesPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesClient) TypesDel(ctx context.Context, in *TypesDelReq, opts ...grpc.CallOption) (*TypesDelResp, error) {
	out := new(TypesDelResp)
	err := c.cc.Invoke(ctx, Types_TypesDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesClient) TypesPut(ctx context.Context, in *TypesPutReq, opts ...grpc.CallOption) (*TypesPutResp, error) {
	out := new(TypesPutResp)
	err := c.cc.Invoke(ctx, Types_TypesPut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypesServer is the server API for Types service.
// All implementations must embed UnimplementedTypesServer
// for forward compatibility
type TypesServer interface {
	// 设备类型列表
	TypesGet(context.Context, *TypesGetReq) (*TypesGetResp, error)
	// 增加设备类型
	TypesPost(context.Context, *TypesPostReq) (*TypesPostResp, error)
	// 删除设备类型
	TypesDel(context.Context, *TypesDelReq) (*TypesDelResp, error)
	// 修改设备类型
	TypesPut(context.Context, *TypesPutReq) (*TypesPutResp, error)
	mustEmbedUnimplementedTypesServer()
}

// UnimplementedTypesServer must be embedded to have forward compatible implementations.
type UnimplementedTypesServer struct {
}

func (UnimplementedTypesServer) TypesGet(context.Context, *TypesGetReq) (*TypesGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypesGet not implemented")
}
func (UnimplementedTypesServer) TypesPost(context.Context, *TypesPostReq) (*TypesPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypesPost not implemented")
}
func (UnimplementedTypesServer) TypesDel(context.Context, *TypesDelReq) (*TypesDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypesDel not implemented")
}
func (UnimplementedTypesServer) TypesPut(context.Context, *TypesPutReq) (*TypesPutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypesPut not implemented")
}
func (UnimplementedTypesServer) mustEmbedUnimplementedTypesServer() {}

// UnsafeTypesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypesServer will
// result in compilation errors.
type UnsafeTypesServer interface {
	mustEmbedUnimplementedTypesServer()
}

func RegisterTypesServer(s grpc.ServiceRegistrar, srv TypesServer) {
	s.RegisterService(&Types_ServiceDesc, srv)
}

func _Types_TypesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypesGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesServer).TypesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Types_TypesGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesServer).TypesGet(ctx, req.(*TypesGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Types_TypesPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypesPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesServer).TypesPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Types_TypesPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesServer).TypesPost(ctx, req.(*TypesPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Types_TypesDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypesDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesServer).TypesDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Types_TypesDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesServer).TypesDel(ctx, req.(*TypesDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Types_TypesPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypesPutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesServer).TypesPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Types_TypesPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesServer).TypesPut(ctx, req.(*TypesPutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Types_ServiceDesc is the grpc.ServiceDesc for Types service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Types_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Types",
	HandlerType: (*TypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "typesGet",
			Handler:    _Types_TypesGet_Handler,
		},
		{
			MethodName: "typesPost",
			Handler:    _Types_TypesPost_Handler,
		},
		{
			MethodName: "typesDel",
			Handler:    _Types_TypesDel_Handler,
		},
		{
			MethodName: "typesPut",
			Handler:    _Types_TypesPut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}
